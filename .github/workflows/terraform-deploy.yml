name: Terraform Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - 'README.md'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IAM_USER_ARN: ${{ secrets.IAM_USER_ARN }}
  EMAIL_SNS: ${{ secrets.EMAIL_SNS }}

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Make script executable
      run: chmod +x scripts/package-lambdas.sh
    
    - name: Package Lambda Functions
      run: ./scripts/package-lambdas.sh
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Replace placeholders with secrets 
      run: | 
        sed -i "s#AWS_ACCESS_KEY_PLACEHOLDER#${{ secrets.AWS_ACCESS_KEY_ID }}#" ./terraform.tfvars
        sed -i "s#AWS_SECRET_KEY_PLACEHOLDER#${{ secrets.AWS_SECRET_ACCESS_KEY }}#" ./terraform.tfvars
        sed -i "s#IAM_USER_ARN_PLACEHOLDER#${{ secrets.IAM_USER_ARN }}#" ./terraform.tfvars
        sed -i "s#EMAIL_SNS_PLACEHOLDER#${{ secrets.EMAIL_SNS }}#" ./terraform.tfvars
      working-directory: ./terraform

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

    - name: Cache Terraform Modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugins
          .terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/terraform/*.tf') }}
        restore-keys: |
          ${{ runner.os }}-terraform-
    
    - name: Terraform Plan
      env:
        TF_LOG: DEBUG
        TF_LOG_PATH: terraform-plan-debug.log
        IAM_USER_ARN: ${{ secrets.IAM_USER_ARN }}
      run: terraform plan -var-file="terraform.tfvars" -parallelism=15
      working-directory: ./terraform

    - name: Upload Plan Logs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-logs
        path: ./terraform/terraform-plan-debug.log

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        TF_LOG: DEBUG
        TF_LOG_PATH: terraform-apply-debug.log
        IAM_USER_ARN: ${{ secrets.IAM_USER_ARN }}
      run: terraform apply -var-file="terraform.tfvars" -auto-approve -parallelism=15
      working-directory: ./terraform

    - name: Upload Apply Logs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-apply-logs
        path: ./terraform/terraform-apply-debug.log

    - name: Upload Lambda Packages
      uses: actions/upload-artifact@v3
      with:
        name: lambda-packages
        path: packages/

    - name: Invoke ada-generate-file-production Lambda Function
      run: |
        aws lambda invoke \
          --function-name ada-generate-file-production \
          --payload '{}' \
          response.json
        
        echo "Lambda function invocation result:"
        cat response.json
